
/<h1><i class="icon-twitter"></i>Font Awesome!!</h1>
/<p>Why? <i class="icon-ok-circle"></i> Because!!</p>
/%a{"data-wysihtml5-command" => "formatBlock", "data-wysihtml5-command-value" => "h1"} H1

/ the helper method fa_icon returns an 'undefined method' error. not sure why.
/ wyishtml5 toolbar
%ul#wysihtml5-toolbar{style: "display: none;"}
  / %a{"data-wysihtml5-command" => "formatBlock", "data-wysihtml5-command-value" => "h1"} H1
  / %a{"data-wysihtml5-command" => "formatBlock", "data-wysihtml5-command-value" => "h2"} H2
  / %a{"data-wysihtml5-command" => "formatBlock", "data-wysihtml5-command-value" => "div"} Normal Text
  %li
    .btn-group
      %a.btn{"data-wysihtml5-command" => "bold"}
        %i.icon-bold
      %a.btn{"data-wysihtml5-command" => "italic"}
        %i.icon-italic
      %a.btn{"data-wysihtml5-command" => "underline"}
        %i.icon-underline
  %li
    .btn-group  
      %a.btn{"data-wysihtml5-command" => "insertOrderedList"}
        %i.icon-list-ol
      %a.btn{"data-wysihtml5-command" => "insertUnorderedList"}
        %i.icon-list-ul
  %li
    .btn-group
      %a.btn{"data-wysihtml5-command" => "Outdent"}
        %i.icon-indent-left
      %a.btn{"data-wysihtml5-command" => "Indent"}
        %i.icon-indent-right
  %li
    .btn-group
      %a.btn{"data-wysihtml5-command" => "justifyCenter"}
        %i.icon-align-center
      %a.btn{"data-wysihtml5-command" => "justifyLeft"}
        %i.icon-align-left
      %a.btn{"data-wysihtml5-command" => "justifyRight"}
        %i.icon-align-right
      %a.btn{"data-wysihtml5-command" => "justifyFull"}
        %i.icon-align-justify
  %li
    .btn-group
      %a.btn{"data-wysihtml5-command" => "insertImage"}
        %i.icon-picture
  %li
    .btn-group
      %a.btn{"data-wysihtml5-command" => "createLink"}
        %i.icon-link
  %div{"data-wysihtml5-dialog" => "createLink", style: "display: none;"}
    %label#linkto
      Link to:
      %input.text{"data-wysihtml5-dialog-field" => "href", value: "http://"}
    %a{"data-wysihtml5-dialog-action" => "save"} OK
    %a{"data-wysihtml5-dialog-action" => "cancel"} Cancel
  %div{"data-wysihtml5-dialog" => "insertImage", style: "display: none;"}
    %label#linkto
      Picture:
      %input.text{"data-wysihtml5-dialog-field" => "src", value: "http://"}
    %a{"data-wysihtml5-dialog-action" => "save"} OK
    %a{"data-wysihtml5-dialog-action" => "cancel"} Cancel



  / note "input_html: {id: 'wysihtml5-textarea' }"
  / this is a simple_form, not haml, method.
= simple_form_for @submission, :html => { :multipart => true } do |f|
  = error_messages
  = f.input :title, :label => "Title"
  = f.input :body, :label => "Body", :required => false, input_html: { id: 'wysihtml5-textarea', class: 'body_height'}
  = f.input :photo, :label => "Or, submit an image:", input_html: { id: 'margin_bottom' }
  = f.input :state, :as => :hidden
  - if person_signed_in?
    = f.input :pseudonym_name, label: "Pseudonym (if you'd like to obscure your identity for this one)"
    = f.input :pseudonym_link,
      label: "Link this pseudonym to your profile as if it were your real name",
      hint: "(If you only want to <em>partially</em> obscure your identity for this one.)".html_safe,
      as: :boolean
    - if communicates? :any
      = f.input :author,
        as:         :string,
        label:      "Author (you can submit for anyone)",
        input_html: { :value => "#{resource.author(true).name_and_email if @submission.author(true)}" },
        hint:       "You can even make an account for someone by entering their name & email"
      = f.association :magazine, label_method: :to_s
    - else
      = f.input :author_id, :as => :hidden
  - else
    - if resource.respond_to? :mean
      .contextual-info
        -# this is bullshit; it's a honeypot
        = f.input :mean, :label => "mean (please leave blank)", input_html: { :tabindex => -1 }
        = f.input :tolerance, :label => "tolerance (please leave blank)", input_html: { :tabindex => -1 }
        = f.input :legality, :label => "legality (please leave blank)", input_html: { :tabindex => -1 }
        = f.input :preference, :label => "preference (please leave blank)", input_html: { :tabindex => -1 }
        = f.input :encoding, :label => "encoding (please leave blank)", input_html: { :tabindex => -1 }
    = f.input :author_name, :label => "Your Name"
    = f.input :author_email, :label => "Your Email Address"
  -# submit/preview/save
  - if person_signed_in?
    - if !@submission.draft?
      = f.button :submit, t('save'),    name: "save"
    - else
      = f.button :submit, t('submit!'), name: "submit"
      or
      = f.button :submit, t('preview'), name: "preview", class: "link"
  - else
    =   f.button :submit, t('submit!'), name: "submit"

- if communicates? :any
  = content_for :javascript do
    :javascript
      $(function(){
        var email = $("#submission_author").val().split(' ').pop(),
            span  = $("span#save_for_later");
        if (email != "#{current_person.email}") {
          span.hide(); }
        $("#submission_author")
          .autocomplete({
            source: "/people/autocomplete",
            minLength: 2,
            select: function(evnt, ui) {
              $(this).val(ui.item.value);
            }
          }).keyup(function(){
            var email = $(this).val().split(' ').pop();
            if (email != "#{current_person.email}") {
              span.hide(); }
            else {
              span.show() }
          });
      });

/ why the content_for call? isn't that for calling blocks of JS later?
/ where does #submission_pseudonym_link come from?
= content_for :javascript do
  :javascript
    $(function(){
      if ($("#submission_pseudonym_name").val() == '') {
        $("#submission_pseudonym_link").closest('div').hide(); }
      $("#submission_pseudonym_name").keyup(function(){
        var val = $(this).val();
        if ( !(val.match(/^\s*$/)) && !(val == '')) {
          $("#submission_pseudonym_link").closest('div').slideDown(); }
        else {
          $("#submission_pseudonym_link").closest('div').slideUp(); }
      });

    });

- content_for :sidebar do
  %section#tips
    %header
      %h2 Tips
    %dl
      %dt
        %span.arrow &raquo;
        :markdown
          Use the *Paste as Text* option in the toolbar when pasting from Word
      %dd
        :markdown
          Your submission will be badly mangled if you don't. It won't look like it now, but just you wait until it's submitted!

      %dt
        %span.arrow &raquo;
        :markdown
          Don't add formatting to your whole title; it will already be formatted as a heading!
      %dd
        :markdown
          If you add bold or centering or anything else, it will just make your heading
          look inconsistent from the rest of the headings. Please refrain!

  %section#answers
    %header
      %h2 Answers
    %dl
      %dt
        %span.arrow &raquo;
        How will you review my submission?
      %dd
        :markdown
          Your name will be removed when this is reviewed;
          only the editor
          #{"([#{Person.current_communicators.collect(&:name).to_sentence}][1])" if Person.current_communicators.present?}
          will know you wrote this. And only the coeditor
          #{"([#{Person.current_scorers.collect(&:name).to_sentence}][2])" if Person.current_scorers.present?}
          will know how people score it.
          Everyone else has the privilege of judging it objectively.

            [1]: #{begin person_path(Person.current_communicators.first) rescue "/people" end}
            [2]: #{begin person_path(Person.current_scorers.first) rescue "/people" end}

          "Everyone else" means anyone who wanders into the weekly meeting
          at which your submission is reviewed (you can go, too! It's a good
          way to get very honest feedback). For more info on meetings, visit the [about page](#{root_path}).
      %dt
        %span.arrow &raquo;
        What can I submit?
      %dd
        :markdown
          * Art: We accept photographs & scanned art.
          * Poetry: There are no hard and fast rules for the poetry we accept. Insider’s tip – we strongly dislike centered poetry. Of course, that could change if it’s centered for a brilliant reason.
          * Prose: We ask that you keep your prose to 1,000 words at most, though we’ve published pieces that are wonderful & a bit over the limit.
      %dt
        %span.arrow &raquo;
        What gets in?
      %dd
        :markdown
          We pride ourselves on considering each submission at length, discussing lines we love, potential deeper meanings, or where the piece falls just short of our expectations. We also like to hold a poem on its side to see if it makes a groovy shape. Each staff member gives each submission a number from 1 – 10, and at the end of the semester we average all the scores for all the pieces. The top 50 (give or take) make it in!
      %dt
        %span.arrow &raquo;
        How do I know if I made it?
      %dd
        :markdown
          If you have an account on this website, you'll automatically get an email telling you which of your submissions we've published. If you don't... We'll try to remember to email you! Either way, these emails will come around the end of the academic semester (December in the fall, May in the spring).

/ initialize wysihtml5
/ not sure that i need the .ready jquery call.
/ the reason i added it was because the wysihtml5 start guide says to make sure this particular
/ script loads after the rest of the page. does having it at the bottom of the page guarantee it will
/ load last anyway?
:javascript
  $( document ).ready(function() {
    var editor = new wysihtml5.Editor("wysihtml5-textarea", {
      toolbar:      "wysihtml5-toolbar",
      stylesheets:  "#{stylesheet_path('wysiwyg')}",
      parserRules:  wysihtml5ParserRules
    });
  });

/ wysihtml5 Implementation Resources:
/ http://quickworx.info/using-wysihtml5-editor-in-rails-3-2/
/ https://github.com/refinery/ui/blob/master/app/views/home/_wysiwyg.html.haml
/ NOTE: these are nonstandard resources i came across. The documentation is of course very important.

/ CLEditor - removed code
// cloptions = {
//   width: '99%',
//   height: 500,
//   useCSS: false,
//   docType: '<!DOCTYPE html>',
//   bodyStyle: 'font-family: Cambria, Georgia, serif;',
//   controls:     // controls to add to the toolbar
//     "bold italic underline strikethrough subscript superscript | " +
//     "color highlight removeformat | bullets numbering | outdent " +
//     "indent | alignleft center alignright justify | " +
//     "rule image link unlink | pastetext source"
// }

// $("#submission_body").cleditor(cloptions);

// cloptions.height = 62;
// cloptions.controls = "bold italic underline strikethrough subscript superscript | " +
//     "pastetext source"
// $("#submission_title").cleditor(cloptions);
